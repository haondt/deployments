map $http_x_forwarded_proto $proxy_x_forwarded_proto {
    default $http_x_forwarded_proto;
    '' $scheme;
}
map $http_x_forwarded_host $proxy_x_forwarded_host {
    default $http_x_forwarded_host;
    '' $host;
}
# If we receive X-Forwarded-Port, pass it through; otherwise, pass along the
# server port the client connected to
map $http_x_forwarded_port $proxy_x_forwarded_port {
    default $http_x_forwarded_port;
    '' $server_port;
}
# Include the port in the Host header sent to the container if it is non-standard
map $server_port $host_port {
    default :$server_port;
    80 '';
    443 '';
}
# If the request from the downstream client has an "Upgrade:" header (set to any
# non-empty value), pass "Connection: upgrade" to the upstream (backend) server.
# Otherwise, the value for the "Connection" header depends on whether the user
# has enabled keepalive to the upstream server.
map $http_upgrade $proxy_connection {
    default upgrade;
    '' $proxy_connection_noupgrade;
}
map $upstream_keepalive $proxy_connection_noupgrade {
    # Preserve nginx's default behavior (send "Connection: close").
    default close;
    # Use an empty string to cancel nginx's default behavior.
    true '';
}
# Abuse the map directive (see <https://stackoverflow.com/q/14433309>) to ensure
# that $upstream_keepalive is always defined.  This is necessary because:
#   - The $proxy_connection variable is indirectly derived from
#     $upstream_keepalive, so $upstream_keepalive must be defined whenever
#     $proxy_connection is resolved.
#   - The $proxy_connection variable is used in a proxy_set_header directive in
#     the http block, so it is always fully resolved for every request -- even                                                                                                                                                #     those where proxy_pass is not used (e.g., unknown virtual host).
map "" $upstream_keepalive {
    # The value here should not matter because it should always be overridden in
    # a location block (see the "location" template) for all requests where the
    # value actually matters.
    default false;
}
# Apply fix for very long server names
server_names_hash_bucket_size 128;
# Default dhparam
ssl_dhparam /etc/nginx/dhparam/dhparam.pem;
# Set appropriate X-Forwarded-Ssl header based on $proxy_x_forwarded_proto
map $proxy_x_forwarded_proto $proxy_x_forwarded_ssl {
    default off;
    https on;
}
gzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
log_format vhost escape=default '$host $remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" "$upstream_addr"';                                              access_log off;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305';
    ssl_prefer_server_ciphers off;
error_log /dev/stderr;
resolver 127.0.0.11;

# HTTP 1.1 support
proxy_http_version 1.1;
proxy_set_header Host $host$host_port;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $proxy_connection;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Host $proxy_x_forwarded_host;
proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
proxy_set_header X-Forwarded-Ssl $proxy_x_forwarded_ssl;
proxy_set_header X-Forwarded-Port $proxy_x_forwarded_port;
proxy_set_header X-Original-URI $request_uri;

server {
    listen 80;
    server_name _;
    location ^~ / {
        return 503;
    }
}

{{- $globals := dict }}
{{ $_ := set $globals "vhosts" (dict) }}

{{- range $hostname, $containers := groupByMulti . "Env.RATHOLE_VIRTUAL_HOST" "," }}
    {{- $hostname = trim $hostname }}
    {{- if not $hostname }}
        {{- continue}}
    {{- end}}

    {{- range $container := $containers }}
        {{- if not (contains $container.Env "RATHOLE_INCLUDE") }}
            {{- $containers = without $containers $container }}
        {{- end}}
    {{- end }}

    {{- if (eq (len $containers) 0) }}
        {{- continue }}
    {{- end }}


    {{- $vhost_data := (dict) }}
    {{ $_ := set $vhost_data "vpaths" (dict) }}
    {{ $_ := set $vhost_data "has_root_path" false }}

    {{- $_ := set $vhost_data "max_body_size" (groupByKeys $containers "Env.RATHOLE_MAX_BODY_SIZE" | first) }}
    {{- $_ := set $vhost_data "connection_timeout" (groupByKeys $containers "Env.RATHOLE_CONNECTION_TIMEOUT" | first) }}

    {{- range $path, $current_path_containers := groupByWithDefault $containers "Env.RATHOLE_VIRTUAL_PATH" "/" }}
        {{- $vpath_data := (dict) }}

        {{ $alias := $hostname }}
        {{- if and (ne $path "/") (ne $path "") }}
            {{- $alias = printf "%s-%s" $hostname (sha1sum $path) }}
        {{- end }}

        {{- if (eq $path "/") }}
            {{ $_ := set $vhost_data "has_root_path" true }}
        {{- end }}

        {{ $_ := set $vpath_data "hosts" (dict) }}
        {{- range $container := $current_path_containers }}
            {{- $host_data := (dict) }}
            {{- $host := $container.Name }}

            {{- $_ := set $host_data "port" (index $container.Env "RATHOLE_VIRTUAL_PORT" | default "80") }}

            {{- $_ := set $vpath_data.hosts $host $host_data }}
        {{- end }}

        {{- $_ := set $vpath_data "vpath" $path }}
        {{- $dest := groupByKeys $current_path_containers "Env.RATHOLE_VIRTUAL_DEST" | first | default "" }}
        {{- $_ := set $vpath_data "dest" $dest }}

        {{ $_ := set $vhost_data.vpaths $alias $vpath_data }}
    {{- end }}

    {{ $_ := set $globals.vhosts $hostname $vhost_data }}
{{- end }}

{{- range $hostname, $vhost_data := $globals.vhosts }}

# {{ $hostname }}
{{- range $alias, $vpath_data := $vhost_data.vpaths }}
upstream {{ $alias }} {
    {{- range $host, $host_data := $vpath_data.hosts }}
    server {{ $host }}:{{ $host_data.port }};
    {{- end }}
}
{{ end -}}

server {
    listen 80;
    server_name {{ $hostname }};
    http2 on;

    {{ if $vhost_data.max_body_size -}}
    client_max_body_size {{ $vhost_data.max_body_size }};
    {{ end -}}

    {{ if $vhost_data.connection_timeout -}}
    proxy_read_timeout {{ $vhost_data.connection_timeout }};
    proxy_send_timeout {{ $vhost_data.connection_timeout }};
    send_timeout       {{ $vhost_data.connection_timeout }};
    {{ end -}}

    {{- range $alias, $vpath_data := $vhost_data.vpaths }}
    location {{ $vpath_data.vpath }} {
        proxy_pass http://{{ $alias }}{{ $vpath_data.dest }};
        set $upstream_keepalive true;
    }
    {{ end -}}
    {{- if not $vhost_data.has_root_path }}
    location / {
        return 404;
    }
    {{- end }}
}


{{- end }}


{{/* $globals | toPrettyJson */}}

